// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Modal rendering should render a <Modal /> 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <StyledModal
    onPress={[Function]}
    primary={true}
  >
    <Component>
      children
    </Component>
  </StyledModal>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <ForwardRef
          activeOpacity={0.95}
          onPress={[Function]}
        />,
        <ForwardRef
          style={
            Object {
              "width": undefined,
            }
          }
        >
          <ForwardRef
            onPress={[Function]}
            primary={true}
          >
            <ForwardRef />
            <TouchableOpacity
              activeOpacity={0.2}
              onPress={[Function]}
              style={
                Object {
                  "width": 32,
                }
              }
            />
          </ForwardRef>
          <ForwardRef
            onPress={[Function]}
            primary={true}
          >
            <Component>
              children
            </Component>
          </ForwardRef>
          <ForwardRef
            onPress={[Function]}
            primary={true}
          >
            <Button
              onPress={[Function]}
              primary={true}
              width="80px"
            >
              cancel
            </Button>
          </ForwardRef>
        </ForwardRef>,
      ],
      "hardwareAccelerated": false,
      "onPress": [Function],
      "primary": true,
      "visible": true,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "activeOpacity": 0.95,
          "onPress": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "rules": Array [
              "    
    background-color: ",
              [Function],
              ";       
    flex: 1;
    align-items: center;    
    width: 100%;
    padding-top: 50;
    padding-bottom: 50;
    padding-left: 20;
    padding-right: 20;     
",
            ],
          },
          "displayName": "Styled(TouchableOpacity)",
          "getDefaultProps": [Function],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef
              onPress={[Function]}
              primary={true}
            >
              <ForwardRef />
              <TouchableOpacity
                activeOpacity={0.2}
                onPress={[Function]}
                style={
                  Object {
                    "width": 32,
                  }
                }
              />
            </ForwardRef>,
            <ForwardRef
              onPress={[Function]}
              primary={true}
            >
              <Component>
                children
              </Component>
            </ForwardRef>,
            <ForwardRef
              onPress={[Function]}
              primary={true}
            >
              <Button
                onPress={[Function]}
                primary={true}
                width="80px"
              >
                cancel
              </Button>
            </ForwardRef>,
          ],
          "style": Object {
            "width": undefined,
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef />,
                <TouchableOpacity
                  activeOpacity={0.2}
                  onPress={[Function]}
                  style={
                    Object {
                      "width": 32,
                    }
                  }
                />,
              ],
              "onPress": [Function],
              "primary": true,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": undefined,
                  "color": undefined,
                  "fontSize": undefined,
                  "inverse": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bxivhb",
                    "isStatic": false,
                    "rules": Array [
                      "    
    color: ",
                      [Function],
                      "; 
    font-size:",
                      [Function],
                      ";            
    width: 95%;                         
",
                    ],
                  },
                  "displayName": "Styled(Component)",
                  "propTypes": Object {
                    "accessible": [Function],
                    "adjustsFontSizeToFit": [Function],
                    "allowFontScaling": [Function],
                    "disabled": [Function],
                    "ellipsizeMode": [Function],
                    "minimumFontScale": [Function],
                    "nativeID": [Function],
                    "numberOfLines": [Function],
                    "onLayout": [Function],
                    "onLongPress": [Function],
                    "onPress": [Function],
                    "pressRetentionOffset": [Function],
                    "selectable": [Function],
                    "selectionColor": [Function],
                    "style": [Function],
                    "suppressHighlighting": [Function],
                    "testID": [Function],
                    "textBreakStrategy": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-bxivhb",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "activeOpacity": 0.2,
                  "children": undefined,
                  "onPress": [Function],
                  "style": Object {
                    "width": 32,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-htpNat",
                "isStatic": false,
                "rules": Array [
                  "   
    background-color: ",
                  [Function],
                  ";         
    padding: 10px;
    display: flex;
    flex-direction: row;          
",
                ],
              },
              "displayName": "Styled(Component)",
              "render": [Function],
              "styledComponentId": "sc-htpNat",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Component>
                children
              </Component>,
              "onPress": [Function],
              "primary": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "children",
              },
              "ref": null,
              "rendered": "children",
              "type": [Function],
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ifAKCX",
                "isStatic": false,
                "rules": Array [
                  " 
    display:flex;   
    text-align: center;   
    color: ",
                  [Function],
                  "; 
    font-size:",
                  [Function],
                  ";        
    background-color: ",
                  [Function],
                  ";         
    width: ",
                  [Function],
                  ";           
    padding-top: 5;
    padding-bottom: 5;
    padding-left: 10;
    padding-right: 10;     
",
                ],
              },
              "displayName": "Styled(Component)",
              "render": [Function],
              "styledComponentId": "sc-ifAKCX",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Button
                onPress={[Function]}
                primary={true}
                width="80px"
              >
                cancel
              </Button>,
              "onPress": [Function],
              "primary": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "cancel",
                "onPress": [Function],
                "primary": true,
                "width": "80px",
              },
              "ref": null,
              "rendered": "cancel",
              "type": [Function],
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-EHOje",
                "isStatic": false,
                "rules": Array [
                  "    
    background-color: ",
                  [Function],
                  ";    
    padding: 10px;
    border-top-width: 1;
    border-top-color: ",
                  [Function],
                  ";  
    border-style: dotted;       
",
                ],
              },
              "displayName": "Styled(Component)",
              "render": [Function],
              "styledComponentId": "sc-EHOje",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": true,
            "rules": Array [
              "    
    position:absolute;
    top: 40; 
    left: 5%;
    max-width: 95%;
",
            ],
          },
          "displayName": "Styled(Component)",
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <ForwardRef
            activeOpacity={0.95}
            onPress={[Function]}
          />,
          <ForwardRef
            style={
              Object {
                "width": undefined,
              }
            }
          >
            <ForwardRef
              onPress={[Function]}
              primary={true}
            >
              <ForwardRef />
              <TouchableOpacity
                activeOpacity={0.2}
                onPress={[Function]}
                style={
                  Object {
                    "width": 32,
                  }
                }
              />
            </ForwardRef>
            <ForwardRef
              onPress={[Function]}
              primary={true}
            >
              <Component>
                children
              </Component>
            </ForwardRef>
            <ForwardRef
              onPress={[Function]}
              primary={true}
            >
              <Button
                onPress={[Function]}
                primary={true}
                width="80px"
              >
                cancel
              </Button>
            </ForwardRef>
          </ForwardRef>,
        ],
        "hardwareAccelerated": false,
        "onPress": [Function],
        "primary": true,
        "visible": true,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeOpacity": 0.95,
            "onPress": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bdVaJa",
              "isStatic": false,
              "rules": Array [
                "    
    background-color: ",
                [Function],
                ";       
    flex: 1;
    align-items: center;    
    width: 100%;
    padding-top: 50;
    padding-bottom: 50;
    padding-left: 20;
    padding-right: 20;     
",
              ],
            },
            "displayName": "Styled(TouchableOpacity)",
            "getDefaultProps": [Function],
            "render": [Function],
            "styledComponentId": "sc-bdVaJa",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef
                onPress={[Function]}
                primary={true}
              >
                <ForwardRef />
                <TouchableOpacity
                  activeOpacity={0.2}
                  onPress={[Function]}
                  style={
                    Object {
                      "width": 32,
                    }
                  }
                />
              </ForwardRef>,
              <ForwardRef
                onPress={[Function]}
                primary={true}
              >
                <Component>
                  children
                </Component>
              </ForwardRef>,
              <ForwardRef
                onPress={[Function]}
                primary={true}
              >
                <Button
                  onPress={[Function]}
                  primary={true}
                  width="80px"
                >
                  cancel
                </Button>
              </ForwardRef>,
            ],
            "style": Object {
              "width": undefined,
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef />,
                  <TouchableOpacity
                    activeOpacity={0.2}
                    onPress={[Function]}
                    style={
                      Object {
                        "width": 32,
                      }
                    }
                  />,
                ],
                "onPress": [Function],
                "primary": true,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": undefined,
                    "color": undefined,
                    "fontSize": undefined,
                    "inverse": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bxivhb",
                      "isStatic": false,
                      "rules": Array [
                        "    
    color: ",
                        [Function],
                        "; 
    font-size:",
                        [Function],
                        ";            
    width: 95%;                         
",
                      ],
                    },
                    "displayName": "Styled(Component)",
                    "propTypes": Object {
                      "accessible": [Function],
                      "adjustsFontSizeToFit": [Function],
                      "allowFontScaling": [Function],
                      "disabled": [Function],
                      "ellipsizeMode": [Function],
                      "minimumFontScale": [Function],
                      "nativeID": [Function],
                      "numberOfLines": [Function],
                      "onLayout": [Function],
                      "onLongPress": [Function],
                      "onPress": [Function],
                      "pressRetentionOffset": [Function],
                      "selectable": [Function],
                      "selectionColor": [Function],
                      "style": [Function],
                      "suppressHighlighting": [Function],
                      "testID": [Function],
                      "textBreakStrategy": [Function],
                    },
                    "render": [Function],
                    "styledComponentId": "sc-bxivhb",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "activeOpacity": 0.2,
                    "children": undefined,
                    "onPress": [Function],
                    "style": Object {
                      "width": 32,
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "rules": Array [
                    "   
    background-color: ",
                    [Function],
                    ";         
    padding: 10px;
    display: flex;
    flex-direction: row;          
",
                  ],
                },
                "displayName": "Styled(Component)",
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Component>
                  children
                </Component>,
                "onPress": [Function],
                "primary": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "children",
                },
                "ref": null,
                "rendered": "children",
                "type": [Function],
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ifAKCX",
                  "isStatic": false,
                  "rules": Array [
                    " 
    display:flex;   
    text-align: center;   
    color: ",
                    [Function],
                    "; 
    font-size:",
                    [Function],
                    ";        
    background-color: ",
                    [Function],
                    ";         
    width: ",
                    [Function],
                    ";           
    padding-top: 5;
    padding-bottom: 5;
    padding-left: 10;
    padding-right: 10;     
",
                  ],
                },
                "displayName": "Styled(Component)",
                "render": [Function],
                "styledComponentId": "sc-ifAKCX",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Button
                  onPress={[Function]}
                  primary={true}
                  width="80px"
                >
                  cancel
                </Button>,
                "onPress": [Function],
                "primary": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "cancel",
                  "onPress": [Function],
                  "primary": true,
                  "width": "80px",
                },
                "ref": null,
                "rendered": "cancel",
                "type": [Function],
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-EHOje",
                  "isStatic": false,
                  "rules": Array [
                    "    
    background-color: ",
                    [Function],
                    ";    
    padding: 10px;
    border-top-width: 1;
    border-top-color: ",
                    [Function],
                    ";  
    border-style: dotted;       
",
                  ],
                },
                "displayName": "Styled(Component)",
                "render": [Function],
                "styledComponentId": "sc-EHOje",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bwzfXH",
              "isStatic": true,
              "rules": Array [
                "    
    position:absolute;
    top: 40; 
    left: 5%;
    max-width: 95%;
",
              ],
            },
            "displayName": "Styled(Component)",
            "render": [Function],
            "styledComponentId": "sc-bwzfXH",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
