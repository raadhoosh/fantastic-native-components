// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Image rendering should render a <Image /> 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Image
    source={
      Object {
        "testUri": "../../../src/screen/ImagePage/img_avatar3.png",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "source": Object {
        "testUri": "../../../src/screen/ImagePage/img_avatar3.png",
      },
    },
    "ref": null,
    "rendered": null,
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": undefined,
      "componentStyle": ComponentStyle {
        "componentId": "sc-bdVaJa",
        "isStatic": true,
        "rules": Array [
          "
width: 400px;
height: 400px;
",
        ],
      },
      "displayName": "Styled(Component)",
      "getSize": [Function],
      "prefetch": [Function],
      "propTypes": Object {
        "accessibilityLabel": [Function],
        "accessible": [Function],
        "blurRadius": [Function],
        "capInsets": [Function],
        "defaultSource": [Function],
        "onError": [Function],
        "onLayout": [Function],
        "onLoad": [Function],
        "onLoadEnd": [Function],
        "onLoadStart": [Function],
        "onPartialLoad": [Function],
        "onProgress": [Function],
        "resizeMethod": [Function],
        "resizeMode": [Function],
        "source": [Function],
        "style": [Function],
        "testID": [Function],
      },
      "render": [Function],
      "resolveAssetSource": [Function],
      "styledComponentId": "sc-bdVaJa",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
      Symbol(Symbol.hasInstance): [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "source": Object {
          "testUri": "../../../src/screen/ImagePage/img_avatar3.png",
        },
      },
      "ref": null,
      "rendered": null,
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": undefined,
        "componentStyle": ComponentStyle {
          "componentId": "sc-bdVaJa",
          "isStatic": true,
          "rules": Array [
            "
width: 400px;
height: 400px;
",
          ],
        },
        "displayName": "Styled(Component)",
        "getSize": [Function],
        "prefetch": [Function],
        "propTypes": Object {
          "accessibilityLabel": [Function],
          "accessible": [Function],
          "blurRadius": [Function],
          "capInsets": [Function],
          "defaultSource": [Function],
          "onError": [Function],
          "onLayout": [Function],
          "onLoad": [Function],
          "onLoadEnd": [Function],
          "onLoadStart": [Function],
          "onPartialLoad": [Function],
          "onProgress": [Function],
          "resizeMethod": [Function],
          "resizeMode": [Function],
          "source": [Function],
          "style": [Function],
          "testID": [Function],
        },
        "render": [Function],
        "resolveAssetSource": [Function],
        "styledComponentId": "sc-bdVaJa",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
