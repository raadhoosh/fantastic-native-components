// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Panel rendering toMatchSnapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Panel
    primary={true}
    title="panel"
    visible={true}
  >
    <Component>
      <Component>
        Test
      </Component>
    </Component>
  </Panel>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef
          primary={true}
          title="panel"
          visible={true}
        >
          <ForwardRef>
            panel
          </ForwardRef>
        </ForwardRef>,
        <ForwardRef
          primary={true}
          title="panel"
          visible={true}
        >
          <Component>
            <Component>
              Test
            </Component>
          </Component>
        </ForwardRef>,
      ],
      "style": Object {
        "flex": 1,
        "marginTop": 5,
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef>
              panel
            </ForwardRef>,
            undefined,
          ],
          "onPress": undefined,
          "primary": true,
          "title": "panel",
          "visible": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "panel",
            },
            "ref": null,
            "rendered": "panel",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-htpNat",
                "isStatic": true,
                "rules": Array [
                  "
    color: #fff;
    font-size: 14px;
    width: 95%;
",
                ],
              },
              "displayName": "Styled(Component)",
              "propTypes": Object {
                "accessible": [Function],
                "adjustsFontSizeToFit": [Function],
                "allowFontScaling": [Function],
                "disabled": [Function],
                "ellipsizeMode": [Function],
                "minimumFontScale": [Function],
                "nativeID": [Function],
                "numberOfLines": [Function],
                "onLayout": [Function],
                "onLongPress": [Function],
                "onPress": [Function],
                "pressRetentionOffset": [Function],
                "selectable": [Function],
                "selectionColor": [Function],
                "style": [Function],
                "suppressHighlighting": [Function],
                "testID": [Function],
                "textBreakStrategy": [Function],
              },
              "render": [Function],
              "styledComponentId": "sc-htpNat",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          undefined,
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "rules": Array [
              "
    background-color: ",
              [Function],
              ";
    padding: 10px;
    display: flex;
    flex-direction: row;
",
            ],
          },
          "displayName": "Styled(TouchableOpacity)",
          "getDefaultProps": [Function],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Component>
            <Component>
              Test
            </Component>
          </Component>,
          "primary": true,
          "title": "panel",
          "visible": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Component>
              Test
            </Component>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Test",
            },
            "ref": null,
            "rendered": "Test",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "sc-bxivhb",
            "isStatic": false,
            "rules": Array [
              "
    display:flex;
    text-align: center;
    background-color: ",
              [Function],
              ";
    width: auto;
    padding-top: 5;
    padding-bottom: 5;
    padding-left: 10;
    padding-right: 10;
    border: 1px;
    border-color: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "Styled(Component)",
          "render": [Function],
          "styledComponentId": "sc-bxivhb",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": undefined,
      "componentStyle": ComponentStyle {
        "componentId": "sc-bdVaJa",
        "isStatic": true,
        "rules": Array [
          "
    flex: 1;
    padding-left: 8;
    padding-right: 8;
",
        ],
      },
      "displayName": "Styled(Component)",
      "render": [Function],
      "styledComponentId": "sc-bdVaJa",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
      Symbol(Symbol.hasInstance): [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            primary={true}
            title="panel"
            visible={true}
          >
            <ForwardRef>
              panel
            </ForwardRef>
          </ForwardRef>,
          <ForwardRef
            primary={true}
            title="panel"
            visible={true}
          >
            <Component>
              <Component>
                Test
              </Component>
            </Component>
          </ForwardRef>,
        ],
        "style": Object {
          "flex": 1,
          "marginTop": 5,
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef>
                panel
              </ForwardRef>,
              undefined,
            ],
            "onPress": undefined,
            "primary": true,
            "title": "panel",
            "visible": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "panel",
              },
              "ref": null,
              "rendered": "panel",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": true,
                  "rules": Array [
                    "
    color: #fff;
    font-size: 14px;
    width: 95%;
",
                  ],
                },
                "displayName": "Styled(Component)",
                "propTypes": Object {
                  "accessible": [Function],
                  "adjustsFontSizeToFit": [Function],
                  "allowFontScaling": [Function],
                  "disabled": [Function],
                  "ellipsizeMode": [Function],
                  "minimumFontScale": [Function],
                  "nativeID": [Function],
                  "numberOfLines": [Function],
                  "onLayout": [Function],
                  "onLongPress": [Function],
                  "onPress": [Function],
                  "pressRetentionOffset": [Function],
                  "selectable": [Function],
                  "selectionColor": [Function],
                  "style": [Function],
                  "suppressHighlighting": [Function],
                  "testID": [Function],
                  "textBreakStrategy": [Function],
                },
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            undefined,
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-bwzfXH",
              "isStatic": false,
              "rules": Array [
                "
    background-color: ",
                [Function],
                ";
    padding: 10px;
    display: flex;
    flex-direction: row;
",
              ],
            },
            "displayName": "Styled(TouchableOpacity)",
            "getDefaultProps": [Function],
            "render": [Function],
            "styledComponentId": "sc-bwzfXH",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Component>
              <Component>
                Test
              </Component>
            </Component>,
            "primary": true,
            "title": "panel",
            "visible": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Component>
                Test
              </Component>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Test",
              },
              "ref": null,
              "rendered": "Test",
              "type": [Function],
            },
            "type": [Function],
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": false,
              "rules": Array [
                "
    display:flex;
    text-align: center;
    background-color: ",
                [Function],
                ";
    width: auto;
    padding-top: 5;
    padding-bottom: 5;
    padding-left: 10;
    padding-right: 10;
    border: 1px;
    border-color: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "Styled(Component)",
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": undefined,
        "componentStyle": ComponentStyle {
          "componentId": "sc-bdVaJa",
          "isStatic": true,
          "rules": Array [
            "
    flex: 1;
    padding-left: 8;
    padding-right: 8;
",
          ],
        },
        "displayName": "Styled(Component)",
        "render": [Function],
        "styledComponentId": "sc-bdVaJa",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
