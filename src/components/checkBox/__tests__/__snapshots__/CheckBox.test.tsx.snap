// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CheckBox rendering toMatchSnapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CheckBox
    backgroundColor="9c27b0"
    checked={true}
    color="#f00"
    height={30}
    onPress={[Function]}
    primary={true}
    width={30}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "activeOpacity": 0.2,
      "children": <ForwardRef
        backgroundColor="9c27b0"
        checked={true}
        color="#f00"
        height={30}
        onPress={[Function]}
        primary={true}
        width={30}
      >
        <ForwardRef
          color="#fff"
          name="check"
          size={12}
          type="FontAwesome"
        />
      </ForwardRef>,
      "onPress": [Function],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "backgroundColor": "9c27b0",
        "checked": true,
        "children": <ForwardRef
          color="#fff"
          name="check"
          size={12}
          type="FontAwesome"
        />,
        "color": "#f00",
        "height": 30,
        "onPress": [Function],
        "primary": true,
        "width": 30,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "color": "#fff",
          "name": "check",
          "size": 12,
          "type": "FontAwesome",
        },
        "ref": null,
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "displayName": "WithTheme(Icon)",
          "render": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gPEVay",
          "isStatic": false,
          "rules": Array [
            "      
    border: 2px solid ",
            [Function],
            ";        
    width: ",
            [Function],
            ";       
    height: ",
            [Function],
            ";             
    border-radius: ",
            [Function],
            ";     
    justify-content: center;
    align-items: center;
    background-color: ",
            [Function],
            ";
    margin-bottom: 5px;    
",
          ],
        },
        "displayName": "Styled(Component)",
        "render": [Function],
        "styledComponentId": "sc-gPEVay",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.2,
        "children": <ForwardRef
          backgroundColor="9c27b0"
          checked={true}
          color="#f00"
          height={30}
          onPress={[Function]}
          primary={true}
          width={30}
        >
          <ForwardRef
            color="#fff"
            name="check"
            size={12}
            type="FontAwesome"
          />
        </ForwardRef>,
        "onPress": [Function],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "backgroundColor": "9c27b0",
          "checked": true,
          "children": <ForwardRef
            color="#fff"
            name="check"
            size={12}
            type="FontAwesome"
          />,
          "color": "#f00",
          "height": 30,
          "onPress": [Function],
          "primary": true,
          "width": 30,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "color": "#fff",
            "name": "check",
            "size": 12,
            "type": "FontAwesome",
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "WithTheme(Icon)",
            "render": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gPEVay",
            "isStatic": false,
            "rules": Array [
              "      
    border: 2px solid ",
              [Function],
              ";        
    width: ",
              [Function],
              ";       
    height: ",
              [Function],
              ";             
    border-radius: ",
              [Function],
              ";     
    justify-content: center;
    align-items: center;
    background-color: ",
              [Function],
              ";
    margin-bottom: 5px;    
",
            ],
          },
          "displayName": "Styled(Component)",
          "render": [Function],
          "styledComponentId": "sc-gPEVay",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
